{-
   Todo

   Todo

   OpenAPI Version: 3.0.3
   Todo API version: 1.0.0
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : Todo.API.Todo
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module Todo.API.Todo where

import Todo.Core
import Todo.MimeTypes
import Todo.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** Todo

-- *** createTodo

-- | @POST \/todos@
-- 
-- Craete Todo
-- 
-- AuthMethod: 'AuthBasicBasicAuth'
-- 
createTodo
  :: (Consumes CreateTodo MimeJSON)
  => TodoRequest CreateTodo MimeJSON Todo MimeJSON
createTodo =
  _mkRequest "POST" ["/todos"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicBasicAuth)

data CreateTodo 
instance HasBodyParam CreateTodo CreateTodoRequest 

-- | @application/json@
instance Consumes CreateTodo MimeJSON

-- | @application/json@
instance Produces CreateTodo MimeJSON


-- *** deleteTodo

-- | @DELETE \/todos\/{todo_id}@
-- 
-- Delete Todo
-- 
-- AuthMethod: 'AuthBasicBasicAuth'
-- 
deleteTodo
  :: TodoId -- ^ "todoId"
  -> TodoRequest DeleteTodo MimeNoContent NoContent MimeNoContent
deleteTodo (TodoId todoId) =
  _mkRequest "DELETE" ["/todos/",toPath todoId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicBasicAuth)

data DeleteTodo  
instance Produces DeleteTodo MimeNoContent


-- *** getTodo

-- | @GET \/todos\/{todo_id}@
-- 
-- Get Todo
-- 
-- AuthMethod: 'AuthBasicBasicAuth'
-- 
getTodo
  :: TodoId -- ^ "todoId"
  -> TodoRequest GetTodo MimeNoContent Todo MimeJSON
getTodo (TodoId todoId) =
  _mkRequest "GET" ["/todos/",toPath todoId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicBasicAuth)

data GetTodo  
-- | @application/json@
instance Produces GetTodo MimeJSON


-- *** getTodoList

-- | @GET \/todos@
-- 
-- Get Todo List
-- 
-- AuthMethod: 'AuthBasicBasicAuth'
-- 
getTodoList
  :: TodoRequest GetTodoList MimeNoContent [Todo] MimeJSON
getTodoList =
  _mkRequest "GET" ["/todos"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicBasicAuth)

data GetTodoList  
-- | @application/json@
instance Produces GetTodoList MimeJSON


-- *** updateTodo

-- | @PUT \/todos\/{todo_id}@
-- 
-- Update Todo
-- 
-- AuthMethod: 'AuthBasicBasicAuth'
-- 
updateTodo
  :: (Consumes UpdateTodo MimeJSON)
  => TodoId -- ^ "todoId"
  -> TodoRequest UpdateTodo MimeJSON [Todo] MimeJSON
updateTodo (TodoId todoId) =
  _mkRequest "PUT" ["/todos/",toPath todoId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicBasicAuth)

data UpdateTodo 
instance HasBodyParam UpdateTodo CreateTodoRequest 

-- | @application/json@
instance Consumes UpdateTodo MimeJSON

-- | @application/json@
instance Produces UpdateTodo MimeJSON

